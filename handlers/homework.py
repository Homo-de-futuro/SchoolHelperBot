from aiogram import types
from aiogram.types import ReplyKeyboardRemove
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text

from run_bot import dp, bot
from keyboards import user_kb
from parse import parse
from SQL import db_user

from SETTINGS import *

import datetime



class HWByDateFSM(StatesGroup):
    date = State()




def make_homework_message(hw_list):
    hw_message = ''

    for subject in hw_list:
        hw_message += '‚Ä¢ ' + '<b>' + subject + '</b>' + ' - ' + hw_list[subject] + '\n'
    
    return hw_message


#–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
@dp.callback_query_handler(text='hw_menu_btn')
async def hw_settings(callback: types.CallbackQuery):
    await callback.answer(' ')
    await callback.message.edit_text(text=HOMEWORK_MENU_TEXT, reply_markup=user_kb.hw_menu_keyboard)
    


@dp.callback_query_handler(text='hw_get_next_day_btn') 
async def hw_back(callback: types.CallbackQuery):
    await callback.answer('–≠—Ç–æ –∑–∞–π–º–µ—Ç –ø—Ä–∏–±–ª–µ–∑–∏—Ç–µ–ª—å–Ω–æ 10 —Å–µ–∫—É–Ω–¥', show_alert=True)
    data = db_user.sql_get_auth_data(callback.from_user.id)
    try:
        parse_res = parse.get_next_homework(data['login'], data['password'])
        print('start next part')
        day_of_week = parse_res[1]
        hw_list = parse_res[0]

        mess = make_homework_message(hw_list)

        await callback.message.answer(f'''
        <b>–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ {day_of_week}</b>
        
{mess}
    ''')
        await callback.message.answer(text=HOMEWORK_MENU_TEXT, reply_markup=user_kb.hw_menu_keyboard)
        await callback.message.delete()
    except:
        await callback.message.answer('–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')



# --------------- HW BY DATE ---------------
@dp.callback_query_handler(text='hw_get_by_date_btn')
async def hw_by_date(callback: types.CallbackQuery):
    global menu_message_id

    menu_message_id = callback.message.message_id
    await callback.message.answer('''–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 
    
–î–ï–ù–¨[–ø—Ä–æ–±–µ–ª]–ú–ï–°–Ø–¶[–ø—Ä–æ–±–µ–ª]–ì–û–î

<i>–ü—Ä–∏–º–µ—Ä: 4 3 2023</i>''', reply_markup=user_kb.exit)
    await HWByDateFSM.date.set()


# @dp.message_handler(Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True),state=HWByDateFSM.date)
# async def cancel(message:types.Message, state:FSMContext):
#     await bot.delete_message(message.chat.id, menu_message_id)
#     await message.answer(HOMEWORK_MENU_TEXT, reply_markup=user_kb.hw_menu_keyboard)


@dp.message_handler(state=HWByDateFSM.date)
async def check_date(message:types.Message, state:FSMContext):
    ERROR_MESSAGE = '''<b>–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥</b>, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:

<b>–î–ï–ù–¨[–ø—Ä–æ–±–µ–ª]–ú–ï–°–Ø–¶[–ø—Ä–æ–±–µ–ª]–ì–û–î</b>

<i>–ü—Ä–∏–º–µ—Ä: 4 3 2023</i>'''

    input = message.text.split(' ')

    if len(input) == 3:
        try:
            await message.answer('–ü–æ–¥–æ–∂–¥–∏—Ç–µ –æ–∫–æ–ª–æ 10 —Å–µ–∫—É–Ω–¥, —Å–æ–±–∏—Ä–∞–µ–º –∏—Ñ–Ω–æ—Ä–º–∞—Ü–∏—é...', reply_markup=ReplyKeyboardRemove())
            date = datetime.date(int(input[2]), int(input[1]), int(input[0]))
            auth_data = db_user.sql_get_auth_data(message.from_user.id)
            hw_result = parse.get_homework_by_date(auth_data['login'], auth_data['password'], date)

            if hw_result == 'WEEKEND':
                await message.answer('–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ –±—ã–ª–æ –∑–∞–¥–∞–Ω–æ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ')
            elif hw_result == 'YEAR':
                await message.answer('–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–æ–º–∞—à–Ω—é—é —Ä–∞–±–æ—Ç—É —Ç–æ–ª—å–∫–æ –∑–∞ <b>—Ç–µ–∫—É—â–∏–π —É—á–µ–±–Ω—ã–π –≥–æ–¥</b>!')
            else:
                day_of_week = hw_result[1]
                hw_list = hw_result[0]
                mess = make_homework_message(hw_list)
                
                await message.answer(f'''
<b>–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ {input[0]+'.'+input[1]+'.'+input[2]} ({day_of_week})</b>
    
{mess}
''')            
                # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –º–µ–Ω—é –≤–Ω–∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —É–¥–∞–ª—è—è —Å—Ç–∞—Ä–æ–µ –∏ —Å–æ–∑–¥–∞–≤–∞—è –Ω–æ–≤–æ–µ –≤–Ω–∞—á–∞–ª–µ.
                await bot.delete_message(message.from_user.id, menu_message_id)
                await message.answer(text=HOMEWORK_MENU_TEXT, reply_markup=user_kb.hw_menu_keyboard)
                await state.finish()
        except Exception as ex:
            await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
            
            print(ex)

    else:
        await message.answer(ERROR_MESSAGE)

    
@dp.callback_query_handler(text='hw_go_back_btn')
async def hw_back(callback: types.CallbackQuery):
    await callback.answer(' ')
    await callback.message.edit_text(text=MAIN_MENU_TEXT, reply_markup=user_kb.logged_keyboard)
    

@dp.message_handler(commands=['–æ—Ç–º–µ–Ω–∞'], state=HWByDateFSM.date)
async def exit(message:types.Message, state:FSMContext):
    await message.answer('–ö–∞–∫ —Å–∫–∞–∂–µ—Ç–µ', reply_markup=ReplyKeyboardRemove())
    await bot.delete_message(message.chat.id, menu_message_id)
    await message.answer(text="üìö <b>–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è</b>", reply_markup=user_kb.hw_menu_keyboard)
    await state.finish()


